fabric.LabeledCanvas=fabric.util.createClass(fabric.Canvas,{initialize:function(a,b){b||(b={}),this.callSuper("initialize",a,b),this._id=b._id,this.name=b.name,this.type="labeled-canvas"},toObject:function(){return fabric.util.object.extend(this.callSuper("toObject"),{_id:this._id,name:this.name,type:"labeled-canvas"})},toJSON:function(){return fabric.util.object.extend(this.callSuper("toJSON"),{_id:this._id,name:this.name,type:"labeled-canvas"})}}),fabric.LabeledCanvas.prototype.findById=function(a){return this.getObjects().filter(function(b){return b._id===a})[0]},fabric.LabeledLine=fabric.util.createClass(fabric.Line,{type:"labeled-line",initialize:function(a,b){b||(b={}),a||(a=[]),this.callSuper("initialize",a,b),this.set("_id",b._id),this.set("drawingId",b.drawingId)},toObject:function(){return fabric.util.object.extend(this.callSuper("toObject"),{_id:this.get("_id"),drawingId:this.get("drawingId")})}}),fabric.LabeledLine.fromObject=function(a){return new fabric.LabeledLine([a.x1,a.y1,a.x2,a.y2],a)},fabric.LabeledPath=fabric.util.createClass(fabric.Path,{type:"labeled-path",initialize:function(a,b){b||(b={}),a||(a=[]),this.callSuper("initialize",a,b),this.set("_id",b._id),this.set("drawingId",b.drawingId)},toObject:function(){return fabric.util.object.extend(this.callSuper("toObject"),{_id:this.get("_id"),drawingId:this.get("drawingId")})},toJSON:function(){return fabric.util.object.extend(this.callSuper("toJSON"),{_id:this.get("_id"),drawingId:this.get("drawingId")})}}),fabric.LabeledPath.fromObject=function(a){var b=new fabric.LabeledPath(a.path);return b.set(a),b.set({drawingId:a.drawingId}),b},fabric.LabeledRect=fabric.util.createClass(fabric.Rect,{type:"labeled-rect",initialize:function(a){a||(a={}),this.callSuper("initialize",a),this.set("_id",a._id),this.set("drawingId",a.drawingId)},toObject:function(){return fabric.util.object.extend(this.callSuper("toObject"),{_id:this.get("_id"),drawingId:this.get("drawingId")})}}),fabric.LabeledRect.fromObject=function(a){return new fabric.LabeledRect(a)},fabric.LabeledTriangle=fabric.util.createClass(fabric.Triangle,{type:"labeled-triangle",initialize:function(a){a||(a={}),this.callSuper("initialize",a),this.set("_id",a._id),this.set("drawingId",a.drawingId)},toObject:function(){return fabric.util.object.extend(this.callSuper("toObject"),{_id:this.get("_id"),drawingId:this.get("drawingId")})}}),fabric.LabeledTriangle.fromObject=function(a){return new fabric.LabeledTriangle(a)},fabric.LabeledCircle=fabric.util.createClass(fabric.Circle,{type:"labeled-circle",initialize:function(a){a||(a={}),this.callSuper("initialize",a),this.set("_id",a._id),this.set("drawingId",a.drawingId)},toObject:function(){return fabric.util.object.extend(this.callSuper("toObject"),{_id:this.get("_id"),drawingId:this.get("drawingId")})}}),fabric.LabeledCircle.fromObject=function(a){return new fabric.LabeledCircle(a)},fabric.LabeledIText=fabric.util.createClass(fabric.IText,{type:"labeled-i-text",initialize:function(a,b){b||(b={}),a||(a=""),this.callSuper("initialize",a,b),this.set("_id",b._id),this.set("drawingId",b.drawingId)},toObject:function(){return fabric.util.object.extend(this.callSuper("toObject"),{_id:this.get("_id"),drawingId:this.get("drawingId")})}}),fabric.LabeledIText.fromObject=function(a){return new fabric.LabeledIText(a.text,a)};var CanvasWrapper=function(a,b){this.canvas=new fabric.LabeledCanvas(a,b),this.socket=b.socket,this.mouseDown=!1,this.possiblyDirty=!1,this.currentColor=b.currentColor,this.strokeWidth=b.strokeWidth||"1",this.socket.removeAllListeners(),this.tools={LINE:new LineTool({drawingId:this.canvas._id,fabricCanvas:this.canvas,socket:this.socket}),RECTANGLE:new RectangleTool({drawingId:this.canvas._id,fabricCanvas:this.canvas,socket:this.socket}),TRIANGLE:new TriangleTool({drawingId:this.canvas._id,fabricCanvas:this.canvas,socket:this.socket}),CIRCLE:new CircleTool({drawingId:this.canvas._id,fabricCanvas:this.canvas,socket:this.socket}),FREE:new FreeDrawingTool({drawingId:this.canvas._id,fabricCanvas:this.canvas,socket:this.socket}),TEXT:new TextTool({drawingId:this.canvas._id,fabricCanvas:this.canvas,socket:this.socket}),FILL:new FillTool({drawingId:this.canvas._id,fabricCanvas:this.canvas,socket:this.socket}),DEFAULT:new DefaultTool({drawingId:this.canvas._id,fabricCanvas:this.canvas,socket:this.socket})},this.changeDrawingMode(b.drawingMode||this.tools.DEFAULT.drawingMode);var c=this;this.canvas.on("mouse:down",function(a){c.mouseDown=!0,c.canvas._hoveredTarget&&"default"!==c.handler.drawingMode&&"fill"!==c.handler.drawingMode&&(c.deactivatedTool=c.handler,c.handler=c.tools.DEFAULT,c.handler.init()),c.handler.onMouseDown(a,{currentColor:c.currentColor,strokeWidth:c.strokeWidth})}),this.canvas.on("mouse:move",function(a){c.mouseDown&&c.handler.onMouseMove(a)}),this.canvas.on("mouse:up",function(a){console.log("MOUSE UP"),c.handler.onMouseUp(a),c.mouseDown=!1,c.possiblyDirty=!0,c.deactivatedTool&&(c.handler=c.deactivatedTool,c.deactivatedTool=null)}),this.canvas.on("mouse:over",function(){}),this.canvas.on("mouse:out",function(){}),this.canvas.on("object:modified",function(){console.log("modified : saving canvas"),c.socket.emit("saveDrawing",c.canvas)}),this.canvas.on("object:selected",function(){}),this.canvas.on("object:moving",function(a){c.socket.emit("changing",a.target)}),this.canvas.on("object:scaling",function(a){console.log("scaling"),c.socket.emit("changing",a.target)}),this.canvas.on("object:rotating",function(a){console.log("rotating"),c.socket.emit("changing",a.target)}),this.canvas.on("object:added",function(){console.log("added")}),this.canvas.on("object:removed",function(){console.log("removed")}),this.canvas.on("selection:cleared",function(){console.log("selection cleared ")}),this.socket.on("changing",function(a){var b=c.canvas.findById(a._id);b&&("labeled-line"===b.type?b.initialize([a.x1,a.y1,a.x2,a.y2],a):"labeled-path"===b.type?b.initialize(a.path,a):"labeled-rect"===b.type||"labeled-circle"===b.type||"labeled-triangle"===b.type?b.initialize(a):"labeled-i-text"===b.type&&(b.top=a.top,b.left=a.left,b.angle=a.angle,b.flipX=a.flipX,b.flipY=a.flipY,b.scaleX=a.scaleX,b.scaleY=a.scaleY,b.height=a.height,b.width=a.width),b.setCoords(),c.checkForDirty(),c.canvas.renderAll())}),this.socket.on("addObject",function(a){if(a.drawingId!==c.canvas._id)return void console.log("got message from another drawing!! crap!! Need to fix this!!! Bailing out : "+a.drawingId+" : "+c.canvas._id);var b=fabric.util.string.camelize(fabric.util.string.capitalize(a.type)),d=fabric[b].fromObject(a);c.canvas.add(d),c.checkForDirty()}),this.socket.on("sendToBack",function(a){var b=c.canvas.findById(a._id);b&&(c.canvas.setActiveObject(b),b.sendToBack(),c.checkForDirty())}),this.socket.on("sendBackwards",function(a){var b=c.canvas.findById(a._id);b&&(c.canvas.setActiveObject(b),b.sendBackwards(),c.checkForDirty())}),this.socket.on("bringForward",function(a){var b=c.canvas.findById(a._id);b&&(c.canvas.setActiveObject(b),b.bringForward(),c.checkForDirty())}),this.socket.on("bringToFront",function(a){var b=c.canvas.findById(a._id);b&&(c.canvas.setActiveObject(b),b.bringToFront(),c.checkForDirty())})};CanvasWrapper.prototype.changeDrawingMode=function(a){this.handler=this.tools[a.toUpperCase()],this.handler.init()},CanvasWrapper.prototype.resetDrawingMode=function(){this.changeDrawingMode("default")},CanvasWrapper.prototype.updateCurrentColor=function(a){this.currentColor=a,this.canvas.getActiveObject()&&(this.canvas.getActiveObject().stroke=a,this.canvas.getActiveObject().setCoords(),this.socket.emit("changing",this.canvas.getActiveObject()),this.possiblyDirty=!0)},CanvasWrapper.prototype.updateLayerPosition=function(a){this.canvas.getActiveObject()&&(this.socket.emit(a,this.canvas.getActiveObject()),this.possiblyDirty=!0)},CanvasWrapper.prototype.updateCanvasSize=function(a){this.canvas.setWidth(.95*a.width),this.canvas.setHeight(.65*a.height)},CanvasWrapper.prototype.loadFromJSON=function(a){this.canvas.loadFromJSON(a)},CanvasWrapper.prototype.dispose=function(){this.canvas.dispose()},CanvasWrapper.prototype.discardActiveObject=function(){this.canvas.discardActiveObject()},CanvasWrapper.prototype.checkForDirty=function(){this.possiblyDirty&&(console.log("!! SAVING !!"),this.socket.emit("saveDrawing",this.canvas),this.possiblyDirty=!1)};